generator client {
  provider = "prisma-client-js"
}
 
datasource db {
  provider = "postgresql"
  // Uses connection pooling
  url = env("DATABASE_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("MIGRATE_POSTGRES_URL")
}
 
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String        @unique
  emailVerified  DateTime?
  image         String
  createdAt     DateTime      @default(now())
  accounts      Account[]
  sessions       Session[]
  subscription  Subscription?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Plan {
  @@map("plans")
  id                 String       @id @default(cuid())
  productId          Int       
  productName        String
  variantId          Int          @unique
  name               String
  description        String
  price              String
  isUsageBased       Boolean      @default(false)
  interval           String
  intervalCount      Int
  trialInterval      String
  trialIntervalCount Int
  sort               Int
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @default(now())
  subscription       Subscription[]
}

model Subscription  {
  @@map("subscriptions")
  id               String   @id @default(cuid())
  lemonSqueezyId   String   @unique
  orderId          Int
  name             String
  email            String
  status           String
  statusFormatted  String
  renewsAt         DateTime
  endsAt           DateTime
  trialEndsAt      DateTime
  price            String
  isUsageBased     Boolean    @default(false)
  isPaused         Boolean    @default(false)
  subscriptionItemId String
  user             User       @relation(fields: [userId], references: [id])
  userId           String     @unique
  plan             Plan       @relation(fields: [planId], references: [id])
  planId           String
}